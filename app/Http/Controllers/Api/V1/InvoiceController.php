<?php

namespace App\Http\Controllers\Api\V1;

use App\Filters\V1\InvoicesFilter;
use App\Http\Requests\StoreInvoiceRequest;
use App\Http\Requests\UpdateInvoiceRequest;
use App\Http\Resources\V1\InvoiceResource;
use App\Models\Invoice;
use App\Http\Controllers\Controller;
use App\Http\Resources\V1\InvoiceCollection;
use Illuminate\Http\Request;
use Illuminate\Support\Arr;
use App\Http\Requests\V1\BulkStoreInvoiceRequest;


class InvoiceController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request)
    {
        // Instantiate the InvoicesFilter class to handle query parameter filtering
        $filter = new InvoicesFilter();

        // Transform the request's query parameters into an array of query conditions
        // The transform method will convert something like ?status[ne]=P into [['status', '!=', 'P']]
        $queryItems = $filter->transform($request); // [['column', 'operator', 'value']]

        // Check if there are any filters (query conditions) generated by the filter
        if (count($queryItems) == 0) {
            // If no filters exist, return all invoices paginated
            // No query conditions are applied here, so this simply returns a paginated collection of all invoices
            return new InvoiceCollection(Invoice::paginate());
        } else {
            // If there are filters, apply them to the Invoice query using the where() method
            // This filters the invoices based on the query conditions generated by the filter (e.g., status != 'P')
            $invoices = Invoice::where($queryItems)->paginate();

            // Return the paginated result, with the query parameters appended to the pagination links
            // This ensures that when navigating through pages, the filters (e.g., status[ne]=P) are retained in the URL
            return new InvoiceCollection($invoices->appends($request->query()));
        }
    }


    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreInvoiceRequest $request)
    {
        //
    }

    public function bulkStore(BulkStoreInvoiceRequest $request) {
        $bulk = collect($request->all())->map(function($arr, $key) {
        return Arr::except($arr, ['customerId', 'billedDate', 'paidDate']);
    });

    Invoice::insert($bulk->toArray());
    }


    /**
     * Display the specified resource.
     */
    public function show(Invoice $invoice)
    {
        return new InvoiceResource($invoice);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Invoice $invoice)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateInvoiceRequest $request, Invoice $invoice)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Invoice $invoice)
    {
        //
    }
}
